package random

import "testing"

type test struct{
  in   string;
  want bool;
}

func TestFrequencyCheck(t *testing.T) {
  cases := []test{
	{ "1100100100001111110110101010001000100001011010001100001000110100110001001100011001100010100010111000", true },
	{ "0010100110101110101011101101001010101110100101101100101110100101011100001111011010110100101001001001", true },
	{ "0000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111", true },
	{ "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", false },
	{ "0000000011111111000000000000000000001111110000000011111100000000001111111000000000000000000111111111", false },
  }
  for _, c := range cases {
	if bs, err := BitStringFromString(c.in); err != nil {
	  t.Error(err);
	} else {
	  got := FrequencyCheck(bs)
	  if got != c.want {
		t.Errorf("FrequencyCheck(%q) == %t, want %t", c.in, got, c.want)
	  }
	}
  }
}

func TestBlockFrequencyCheck(t *testing.T) {
  cases := []test{
	{ "1100100100001111110110101010001000100001011010001100001000110100110001001100011001100010100010111000", true },
	{ "0010100110101110101011101101001010101110100101101100101110100101011100001111011010110100101001001001", true },
	{ "0000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111", false },
	{ "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", false },
	{ "0000000011111111000000000000000000001111110000000011111100000000001111111000000000000000000111111111", false },
  }
  for _, c := range cases {
	if bs, err := BitStringFromString(c.in); err != nil {
	  t.Error(err);
	} else {
	  got := BlockFrequencyCheck(bs, 10)
	  if got != c.want {
		t.Errorf("BlockFrequencyCheck(%q) == %t, want %t", c.in, got, c.want)
	  }
	}
  }
}

func TestRunsTest(t *testing.T) {
  cases := []test{
	{ "1100100100001111110110101010001000100001011010001100001000110100110001001100011001100010100010111000", true },
	{ "0010100110101110101011101101001010101110100101101100101110100101011100001111011010110100101001001001", false },
	{ "0000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111", false },
	{ "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", false },
	{ "0000000011111111000000000000000000001111110000000011111100000000001111111000000000000000000111111111", false },
  }
  for _, c := range cases {
	if bs, err := BitStringFromString(c.in); err != nil {
	  t.Error(err);
	} else {
	  got := RunsTest(bs)
	  if got != c.want {
		t.Errorf("RunsTest(%q) == %t, want %t", c.in, got, c.want)
	  }
	}
  }
}
